Ansible Installation :-
---------------------------

Ansible is a "Automation Tool"

It is used to automate the work to reduce human time and errors

It helps to simplify the manual work to automate 

It has two components :- 1). Master (or) Controller
                         2). Target servers (or) Managed Nodes
						 
It is a idempotent which means no other installation needed in the Managed nodes

It is connected through SSH connections.						 


==================================================
**Ansible Master and Nodes Setup - Full Steps**
==================================================


file:///E:/applications/ansible%20installation%20and%20setup-guide.pdf

step1:-Install Ansible on Controller Node
++++++++++++++++++++++++++++++++++++++++++++

1. Update system and install prerequisites
---------------------------------------------
   sudo su
   apt update -y
   apt install software-properties-common -y

2. Add Ansible PPA and install:
----------------------------------
   add-apt-repository --yes --update ppa:ansible/ansible
   apt install ansible -y
   ansible --version

3. Generate SSH Key (On Controller)
-------------------------------------------
 
 ssh-keygen -t rsa -b 2048
 yes
 3 times press enter

4. Copy SSH Key Target Node
-----------------------------------
Attempted:
ssh-copy-id ubuntu@target-private-IP
Received error: Permission denied (publickey)



# Step 2: Define Inventory (controller Node)
*********************************************

5. Fix SSH Access to Target
As root user on the target, run:
------------------------------------
 mkdir -p /root/.ssh
 chmod 700 /root/.ssh

6. From Controller node, copy the public key:
-------------------------------------------------
    cat /root/.ssh/id_rsa.pub

7. On the target, paste the key into authorized_keys:
-----------------------------------------------------------
    echo '<your-public-key>' >> /root/.ssh/authorized_keys
    chmod 600 /root/.ssh/authorized_keys


8. Test SSH from Controller node
  --------------------------------
   ssh root@<target-Private-IP>



# Step 3: Configure SSH Settings (Enable Password Login)
**************************************************************

9. Create Ansible Inventory File in controller node
-----------------------------------------------------
Edit /etc/ansible/hosts and add:
[targets]
<target-Private-IP> ansible_user=root

10. Edit SSH configuration in controller, target nodes:
--------------------------------------------------------
Make the following changes:
 vim /etc/ssh/sshd_config

    - Line 38: `PermitRootLogin yes`
    - Line 43: Remove `#`
    - Line 61: `PasswordAuthentication yes`
    - Line 63: ` Add #`


11. For latest Ubuntu versions, edit:
-----------------------------------------
vi /etc/ssh/sshd_config.d/60-cloudimg-settings.conf

Change:
   ===> 'PasswordAuthentication yes'


12. Now Restart SSH service:
--------------------------------
service ssh restart



# Step 4: Test Ansible Connection
**************************************

Test connection from Master:

ansible all -i /etc/ansible/hosts -m ping


Successful output:

node1 | SUCCESS => {"changed": false, "ping": "pong"}
node2 | SUCCESS => {"changed": false, "ping": "pong"}



# Summary Flow
*******************

| Step | Task                    |
| ---- | ----------------------- |
| 1    | Install Ansible         |
| 2    | Define Inventory        |
| 3    | Configure SSH Settings  |
| 4    | Test Ansible Connection |







Ansible-Vault:-
====================

Vault is nothing encrypting the playbook.yml file 

ansible-vault create <playbook.yml> ------> To create a playbook with pass(password)

ansible-vault edit <playbook.yml>    ------> To edit a playbook file with pass(password)

ansible-vault rekey <playbook.yml> -------> To change the pass(password) of vault

ansible-vault decrypt <playbook.yml>  ------> To remove the pass(password)

ansible-vault encryptingcrypt <playbook.yml>   ------> To give encryption to existing playbook



To execute the encrypted playbook.yml file
++++++++++++++++++++++++++++++++++++++++++++++++++

ansible-playbook <playbook.yml> --ask-vault-pass.




Playbook to install java-17, maven, git, docker, jenkins
===========================================================
- name: Install Java 17, Maven, Git, Docker, Jenkins
  hosts: targets
  become: true
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - software-properties-common
        state: present

    - name: Install Java 17
      apt:
        name: openjdk-17-jdk
        state: present

    - name: Install Maven
      apt:
        name: maven
        state: present

    - name: Install Git
      apt:
        name: git
        state: present

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
        update_cache: yes

    - name: Install Jenkins on target node (Ubuntu 20.04+)
        hosts: targets
        become: yes
        tasks:

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Download Jenkins GPG key
      ansible.builtin.get_url:
        url: https://pkg.jenkins.io/debian-stable/jenkins.io.key
        dest: /usr/share/keyrings/jenkins-keyring.asc
        mode: '0644'

    - name: Add Jenkins repository with signed-by
      ansible.builtin.copy:
        dest: /etc/apt/sources.list.d/jenkins.list
        content: |
          deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/
        mode: '0644'

    - name: Update apt cache again after adding Jenkins repo
      apt:
        update_cache: yes

    - name: Install Jenkins
      apt:
        name: jenkins
        state: present

    - name: Enable and start Docker service
      systemd:
        name: docker
        enabled: true
        state: started

    - name: Ensure Jenkins is started and enabled
      systemd:
        name: jenkins
        state: started
        enabled: yes
